buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'com.netflix.nebula:gradle-ospackage-plugin:9.1.1'
    }
}

plugins {
    id 'application'
    id 'distribution'
    id 'nebula.rpm' version '9.1.1'
}

application {
    mainClass = 'org.janelia.jacsstorage.client.StorageClientApp'
}

project(":jacsstorage-clients") {
    dependencies {
        implementation project(":jacsstorage-core"),
                       CDI_API_LIB,
                       CDI_SE_CORE_LIB,
                       COMMONS_IO_LIB,
                       CMDLINE_ARG_LIB,
                       JAX_RS_JERSEY_CLIENT_LIB,
                       JAX_RS_JERSEY_MEDIA_LIB,
                       JAX_RS_JERSEY_INJECT_LIB,
                       JAX_RS_JERSEY_MEDIA_JSON_LIB,
                       N5_IMGLIB2_LIB

        perfAnnotationProcessor BENCHMARK_ANN_PROCESSOR_LIB

        perfImplementation project
    }

    processPerfResources {
        duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    }

    tasks.register('createStorageClientApp', CreateStartScripts) {
        dependsOn(startScripts)

        mainClass = "org.janelia.jacsstorage.client.StorageClientApp"
        classpath = startScripts.classpath
        outputDir = startScripts.outputDir
        applicationName = "storageClientApp"
    }

    tasks.register('createNewStorageClientApp', CreateStartScripts) {
        dependsOn(startScripts)

        mainClass = "org.janelia.jacsstorage.newclient.StorageClientApp"
        classpath = startScripts.classpath
        outputDir = startScripts.outputDir
        applicationName = "jade"
    }

    tasks.register('createStoragePersistBenchmark', CreateStartScripts) {
        dependsOn(perfJar, startScripts)

        mainClass = "org.janelia.jacsstorage.benchmarks.StoragePersistBenchmark"
        classpath = project.perfJar.outputs.files + startScripts.classpath + configurations.perfRuntimeElements
        outputDir = startScripts.outputDir
        applicationName = "storagePersistBenchmarks"
    }

    tasks.register('createStorageRetrieveBenchmark', CreateStartScripts) {
        dependsOn(perfJar, startScripts)

        mainClass = "org.janelia.jacsstorage.benchmarks.StorageRetrieveBenchmark"
        classpath = project.perfJar.outputs.files + startScripts.classpath + configurations.perfRuntimeElements
        outputDir = startScripts.outputDir
        applicationName = "storageRetrieveBenchmarks"
    }

    tasks.register('createStorageUpdateBenchmark', CreateStartScripts) {
        dependsOn(perfJar, startScripts)

        mainClass = "org.janelia.jacsstorage.benchmarks.StorageUpdateBenchmark"
        classpath = project.perfJar.outputs.files + startScripts.classpath + configurations.perfRuntimeElements
        outputDir = startScripts.outputDir
        applicationName = "storageUpdateBenchmarks"
    }

    distributions {
        benchmarks {
            contents {
                duplicatesStrategy = DuplicatesStrategy.EXCLUDE
                into("bin") {
                    from(createStoragePersistBenchmark)
                    from(createStorageRetrieveBenchmark)
                    from(createStorageUpdateBenchmark)
                    filePermissions {
                        user {
                            read = true
                            write = true
                            execute = true
                        }
                        group {
                            read = true
                            execute = true
                        }
                        other {
                            read = true
                            execute = true
                        }
                    }
                }
                into("lib") {
                    from(project.perfJar.outputs.files)
                    from(project.configurations.perfRuntimeElements)
                }
            }
        }
        main {
            contents {
                duplicatesStrategy = DuplicatesStrategy.EXCLUDE
                into("bin") {
                    from(createStorageClientApp)
                    filePermissions {
                        user {
                            read = true
                            write = true
                            execute = true
                        }
                        group {
                            read = true
                            execute = true
                        }
                        other {
                            read = true
                            execute = true
                        }
                    }
                }
                into("bin") {
                    from(createNewStorageClientApp)
                    filePermissions {
                        user {
                            read = true
                            write = true
                            execute = true
                        }
                        group {
                            read = true
                            execute = true
                        }
                        other {
                            read = true
                            execute = true
                        }
                    }
                }
            }
        }
    }

    [distTar, distZip, benchmarksDistTar, benchmarksDistZip, installDist, installBenchmarksDist].each {
        it.dependsOn(createStoragePersistBenchmark, createStorageRetrieveBenchmark, createStorageUpdateBenchmark,
                createStorageClientApp, createNewStorageClientApp)
    }

    tasks.register('ospackage', Rpm) {
        dependsOn(installDist)

        release 1
        arch I386
        os LINUX
        duplicatesStrategy DuplicatesStrategy.EXCLUDE

        def rpmInstallDir;

        if (project.hasProperty('jacs.runtime.env.jadeToolsDir')) {
            rpmInstallDir = project.getProperty("jacs.runtime.env.jadeToolsDir") + "-${project.version}"
        } else {
            rpmInstallDir= "/misc/sc/jadeTools-${project.version}"
        }
        def parentRpmInstallDir = new File(rpmInstallDir).parent
        def installEnv = ["jacs.runtime.env.installDir": rpmInstallDir]

        into "${rpmInstallDir}"

        from ("${buildDir}/install/${project.name}/bin") {
            into "bin"
            filter(org.apache.tools.ant.filters.ExpandProperties, project: filteringProperties(installEnv))
        }

        from ("${buildDir}/install/${project.name}/lib") {
            into "lib"
        }

        from ("src/main/install/scripts") {
            into "bin"
            filter(org.apache.tools.ant.filters.ExpandProperties, project: filteringProperties(installEnv))
            fileMode = 0755
        }

        from ("src/main/install/etc") {
            into "etc"
            filter(org.apache.tools.ant.filters.ExpandProperties, project: filteringProperties(installEnv))
        }

        link("${parentRpmInstallDir}/jadeTools", "${rpmInstallDir}")
    }
}

ext.moduleName = 'org.janelia.jacsstorage.clients'
