allprojects {
    apply plugin: 'java-library'
    apply plugin: 'maven-publish'
    apply plugin: 'idea'
    group = 'org.janelia.jacs-storage'
    version = '1.22.0.RC3'

}

subprojects {
    repositories {
        mavenLocal()
        mavenCentral()
        maven {
            url = "https://nexus.janelia.org/repository/maven-releases"
        }
        maven {
            url = "https://nexus.janelia.org/repository/maven-snapshots"
        }
        maven {
            url = "https://maven.scijava.org/content/groups/public"
        }
    }

    sourceSets {
        integrationTest {
            compileClasspath += sourceSets.main.output + sourceSets.test.output
            runtimeClasspath += sourceSets.main.output + sourceSets.test.output
        }
        perf
    }

    configurations {
        integrationTestImplementation.extendsFrom(implementation, testImplementation)
        integrationTestRuntimeOnly.extendsFrom(runtimeOnly, testRuntimeOnly)
        integrationTestRuntimeElements.extendsFrom(integrationTestImplementation, integrationTestRuntimeOnly)

        perfApi.extendsFrom(api)
        perfImplementation.extendsFrom(perfApi, implementation)
        perfRuntimeOnly.extendsFrom(runtimeOnly)
        perfRuntimeElements.extendsFrom(perfImplementation, perfRuntimeOnly)

        mockitoAgent { transitive = false }
    }

    def mockitoAgentRef = configurations.getByName('mockitoAgent')

    apply {
        from("${rootDir}/deps.gradle")
    }

    afterEvaluate {
        compileJava {
            doFirst {
                options.compilerArgs = [
                        '-Xlint:deprecation',
                        '-Xlint:unchecked'
                ]
            }
        }

        compileTestJava {
            doFirst {
                options.compilerArgs = [
                        '-Xlint:deprecation',
                        '-Xlint:unchecked'
                ]
            }
        }

        compileIntegrationTestJava {
            doFirst {
                options.compilerArgs = [
                        '-Xlint:deprecation',
                        '-Xlint:unchecked'
                ]
            }
        }

        compilePerfJava {
            doFirst {
                options.compilerArgs = [
                        '-Xlint:deprecation',
                        '-Xlint:unchecked'
                ]
            }
        }

        idea {
            module {
                downloadSources = true
                downloadJavadoc = true

                scopes.TEST.plus += [
                    configurations.integrationTestRuntimeElements,
                    configurations.perfRuntimeElements
                ]
            }
        }
    }

    java {
        sourceCompatibility = JavaVersion.VERSION_21
        targetCompatibility = JavaVersion.VERSION_21
    }

    test {
        useJUnitPlatform()

        jvmArgs("-javaagent:${mockitoAgentRef.asPath}", "-Xshare:off")
    }

    tasks.register('perfJar', Jar) {
        dependsOn(configurations.perfRuntimeElements)

        from sourceSets.perf.output
        archiveClassifier.set('perf')
    }

    tasks.register('integrationTest', Test) {
        testClassesDirs = sourceSets.integrationTest.output.classesDirs
        classpath = sourceSets.integrationTest.runtimeClasspath
        shouldRunAfter test

        useJUnitPlatform()
    }

    artifacts {
        perfRuntimeElements perfJar
    }

    tasks.register('sourceJar', Jar) {
        archiveClassifier.set('sources')

        from sourceSets.main.allJava
    }

    publishing {
        publications {
            mavenJar(MavenPublication) {
                from components.java
                artifact sourceJar
            }
        }
        ext {
           if (!project.hasProperty('mavenRepoUser')) {
              mavenRepoUser = ''
           }
           if (!project.hasProperty('mavenRepoPassword')) {
              mavenRepoPassword = ''
           }
        }
        repositories {
            maven {
                def releasesRepoUrl = 'https://nexus.janelia.org/repository/maven-releases'
                def snapshotsRepoUrl = 'https://nexus.janelia.org/repository/maven-snapshots'
                url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
                credentials {
                    username = mavenRepoUser
                    password = mavenRepoPassword
                }
            }
        }
    }
}

tasks.register('updateWrapper', Wrapper) {
    gradleVersion = "8.12"
}

tasks.register('printVersion') {
    doLast {
        println project.version
    }
}

def filteringProperties(otherProperties) {
        org.apache.tools.ant.Project tmpProject = new org.apache.tools.ant.Project()
        tmpProject.initProperties()
        // convert the build config to ant properties to be used with the ant ExpandProperties
        project.ext.properties.each { k,v ->
                if (k.startsWith("jacs.runtime.env.")) {
                        tmpProject.setProperty("${k}", "${v}")
                }
        }
        otherProperties.each { k,v ->
                if (k.startsWith("jacs.runtime.env.")) {
                        tmpProject.setProperty("${k}", "${v}")
                }
        }
        tmpProject
}
