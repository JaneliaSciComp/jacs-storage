allprojects {
    apply plugin: 'java-library'
    apply plugin: 'maven-publish'
    apply plugin: 'idea'
    group = 'org.janelia.jacs-storage'
    version = '1.19.0.RELEASE'
}

subprojects {

    configurations {
        provided
        implementation.extendsFrom(provided)
        integrationTestCompileOnly.extendsFrom(testCompileOnly)
        integrationTestImplementation.extendsFrom(testImplementation)
        integrationTestRuntimeOnly.extendsFrom(testRuntimeOnly)
        perfApi.extendsFrom(api)
        perfApiElements.extendsFrom(perfApi, apiElements)
        perfImplementation.extendsFrom(perfApi, implementation)
        perfRuntimeOnly.extendsFrom(runtimeOnly)
        perfRuntimeElements.extendsFrom(perfImplementation, perfRuntimeOnly)
    }

    apply from: "${rootDir}/deps.gradle"

    sourceSets {
        perf {
            java {
                srcDir file('src/perf/java')
            }
            resources {
                srcDir file('src/perf/resources')
            }
        }
        integrationTest {
            java {
                compileClasspath += main.output + test.output
                runtimeClasspath += main.output + test.output
                srcDir file('src/integrationTest/java')
            }
            resources {
                srcDir file('src/integrationTest/resources')
            }
        }
    }

    afterEvaluate {
        repositories {
            mavenLocal()
            mavenCentral()
            maven {
                url "https://nexus.janelia.org/repository/maven-releases"
            }
            maven {
                url "https://nexus.janelia.org/repository/maven-snapshots"
            }
            maven {
                url "https://maven.scijava.org/content/groups/public"
            }
        }

        compileJava {
            doFirst {
                options.compilerArgs = [
                        '-Xlint:deprecation',
                        '-Xlint:unchecked'
                ]
            }
        }

        compileTestJava {
            doFirst {
                options.compilerArgs = [
                        '-Xlint:deprecation',
                        '-Xlint:unchecked'
                ]
            }
        }

        compileIntegrationTestJava {
            doFirst {
                options.compilerArgs = [
                        '-Xlint:deprecation',
                        '-Xlint:unchecked'
                ]
            }
        }

        compilePerfJava {
            doFirst {
                options.compilerArgs = [
                        '-Xlint:deprecation',
                        '-Xlint:unchecked'
                ]
            }
        }

        idea {
            module {
                downloadSources = true
                downloadJavadoc = true
                scopes.TEST.plus += [
                    configurations.integrationTestCompileClasspath,
                    configurations.integrationTestRuntimeClasspath,
                    configurations.perfApi,
                    configurations.perfRuntimeElements
                ]
            }
        }
    }

    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    task perfJar(type: Jar, dependsOn: configurations.perfRuntimeElements) {
        from sourceSets.perf.output
        archiveClassifier = "perf"
    }

    task integrationTest(type: Test) {
        testClassesDirs += sourceSets.integrationTest.output.classesDirs
        classpath = sourceSets.integrationTest.runtimeClasspath
    }

    artifacts {
        perfRuntimeElements perfJar
    }

    task sourceJar(type: Jar) {
        from sourceSets.main.allJava
        archiveClassifier = 'sources'
    }

    publishing {
        publications {
            mavenJar(MavenPublication) {
                from components.java
                artifact sourceJar
            }
        }
        ext {
           if (!project.hasProperty('mavenRepoUser')) {
              mavenRepoUser = ''
           }
           if (!project.hasProperty('mavenRepoPassword')) {
              mavenRepoPassword = ''
           }
        }
        repositories {
            maven {
                def releasesRepoUrl = 'https://nexus.janelia.org/repository/maven-releases'
                def snapshotsRepoUrl = 'https://nexus.janelia.org/repository/maven-snapshots'
                url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
                credentials {
                    username "${mavenRepoUser}"
                    password "${mavenRepoPassword}"
                }
            }
        }
    }
}

task updateWrapper(type: Wrapper) {
    gradleVersion = "5.5.1"
}

task printVersion {
    doLast {
        println project.version
    }
}

def filteringProperties(otherProperties) {
        org.apache.tools.ant.Project tmpProject = new org.apache.tools.ant.Project()
        tmpProject.initProperties()
        // convert the build config to ant properties to be used with the ant ExpandProperties
        project.ext.properties.each { k,v ->
                if (k.startsWith("jacs.runtime.env.")) {
                        tmpProject.setProperty("${k}", "${v}")
                }
        }
        otherProperties.each { k,v ->
                if (k.startsWith("jacs.runtime.env.")) {
                        tmpProject.setProperty("${k}", "${v}")
                }
        }
        tmpProject
}
