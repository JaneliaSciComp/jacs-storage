buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'com.netflix.nebula:gradle-ospackage-plugin:11.10.1'
    }
}

plugins {
    id 'application'
    id 'distribution'
    id 'com.netflix.nebula.ospackage' version '11.10.1'
}

application {
    mainClass = 'org.janelia.jacsstorage.app.JacsMasterStorageApp'
}

project(':jacsstorage-masterweb') {
    dependencies {
        implementation project(':jacsstorage-commonweb'),
                       WELD_CDI_SE_CORE_LIB

        runtimeOnly JERSEY_INJECT_HK2_LIB,
                    JERSEY_MEDIA_LIB,
                    JERSEY_MEDIA_JSON_LIB,
                    JERSEY_WELD_SE_LIB

        testImplementation JERSEY_TEST_LIB,
                           JERSEY_WELD_SE_LIB,
                           JERSEY_INJECT_HK2_LIB,
                           JERSEY_TEST_UTIL_LIB,
                           JERSEY_TEST_PROVIDER_BUNDLE_LIB

        perfAnnotationProcessor BENCHMARK_ANN_PROCESSOR_LIB

        perfImplementation project,
                           project(path: ":jacsstorage-services", configuration: "perfRuntimeElements"),
                           COMMONS_RNG_LIB,
                           JERSEY_TEST_LIB,
                           JERSEY_TEST_UTIL_LIB,
                           JERSEY_TEST_PROVIDER_BUNDLE_LIB

    }

    tasks.register('createMasterBenchmark', CreateStartScripts) {
        dependsOn(perfJar, startScripts)

        mainClass = 'org.janelia.jacsstorage.master.cmd.MasterAppBenchmarks'
        classpath = startScripts.classpath + configurations.perfRuntimeClasspath + project.perfJar.outputs.files
        outputDir = startScripts.outputDir
        applicationName = 'masterAppBenchmarks'
    }

    distributions {
        benchmarks {
            contents {
                into('bin') {
                    from(createMasterBenchmark)
                }
                into('lib') {
                    from(project.perfJar.outputs.files)
                    from(project.configurations.perfRuntimeClasspath)
                }
            }
        }
        main {
            contents {
                into('bin') {
                    from(new File(project(':jacsstorage-commonweb').projectDir, 'src/main/install/scripts')) {
                        include '*.sh'
                        filter(org.apache.tools.ant.filters.ExpandProperties,
                                project: filteringProperties([
                                        'jacs.runtime.env.serviceName': "${project.name}",
                                        'jacs.runtime.env.serviceVersion': "${project.version}",
                                ]))
                        filePermissions {
                            user {
                                read = true
                                write = true
                                execute = true
                            }
                            group {
                                read = true
                                execute = true
                            }
                            other {
                                read = true
                                execute = true
                            }
                        }
                    }
                }
                into('swagger-webapp') {
                    from(new File(project(':jacsstorage-commonweb').projectDir, 'src/main/swagger-webapp')) {
                        include '**'
                    }
                    from(new File(projectDir, 'src/main/swagger-webapp')) {
                        include 'index.html'
                    }
                }
            }
        }
    }

    [distTar, distZip, benchmarksDistTar, benchmarksDistZip, installDist, installBenchmarksDist].each {
        it.dependsOn(createMasterBenchmark)
    }

    tasks.register('ospackage', Rpm) {
        dependsOn(installDist)

        release = 1
        arch = I386
        os = LINUX

        def rpmInstallDir = "/opt/servers/jacsstorage/${project.name}-${project.version}"
        def systemServiceDir = '/etc/systemd/system'
        def installEnv = ['jacs.runtime.env.installDir': rpmInstallDir]

        postInstall "cp ${rpmInstallDir}/etc/${project.name}.service ${systemServiceDir}/${project.name}.service"

        into "${rpmInstallDir}"

        from(new File(project(':jacsstorage-commonweb').projectDir, 'src/main/install/etc')) {
            into 'etc'
            filter(org.apache.tools.ant.filters.ExpandProperties, project: filteringProperties(installEnv))
            if (project.hasProperty('externalConfig')) {
                rename '(.*)config.properties', '$1default-config.bak'
            }
        }

        from ("${layout.buildDirectory}/install/${project.name}/bin") {
            into 'bin'
            filter(org.apache.tools.ant.filters.ExpandProperties, project: filteringProperties(installEnv))
        }

        from ("${layout.buildDirectory}/install/${project.name}/lib") {
            into 'lib'
        }

        from ("${layout.buildDirectory}/install/${project.name}/swagger-webapp") {
            into 'swagger-webapp'
        }

        from ('src/main/install/scripts') {
            into 'bin'
            filter(org.apache.tools.ant.filters.ExpandProperties, project: filteringProperties(installEnv))
            fileMode = 0755
        }

        from ('src/main/install/etc') {
            into 'etc'
            filter(org.apache.tools.ant.filters.ExpandProperties, project: filteringProperties(installEnv))
        }

        if (project.hasProperty('externalConfig')) {
            def externalConfigFile = new File("${externalConfig}")
            from (externalConfigFile) {
                into "etc"
                filter(org.apache.tools.ant.filters.ExpandProperties, project: filteringProperties(installEnv))
                rename { fileName ->
                    'config.properties'
                }
            }
        }

        link("${systemServiceDir}/multi-user.target.wants/${project.name}.service", "${systemServiceDir}/${project.name}.service")
    }
}

ext.moduleName = 'org.janelia.jacsstorage.masterweb'
