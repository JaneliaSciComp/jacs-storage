plugins {
    id 'application'
    id 'distribution'
}

application {
    applicationName = 'benchmarks'
    mainClass = 'BenchmarkApp'
}

project(':jacsstorage-services') {
    dependencies {
        api(project(':jacsstorage-core'))

        implementation(COMMONS_COMPRESS_LIB,
                       COMMONS_RNG_LIB,
                       JACS_MODEL_RENDERING_LIB,
                       JERSEY_CLIENT_LIB,
                       JERSEY_MEDIA_JSON_LIB,
                       JAKARTA_ACTIVATION,
                       JAVAMAIL_LIB,
                       MONGODB_SYNC_DRIVER_LIB,
                       MONGODB_BSON_LIB,
                       N5_LIB,
                       N5_UNIVERSE_LIB,
                       REFLECTIONS_LIB)

        implementation(platform(REACTOR_BOM),
                       REACTOR_CORE_LIB,
                       platform(AWS_SDK_PLATFORM) {
                           exclude(group: 'software.amazon.awssdk.crt')
                       },
                       AWS_S3_LIB,
                       AWS_CRT_LIB)

        perfAnnotationProcessor(BENCHMARK_ANN_PROCESSOR_LIB)

        perfApi(project,
                JAKARTA_CDI_API_LIB,
                WELD_CDI_SE_CORE_LIB,
                CMDLINE_ARG_LIB)

        perfImplementation(JBLOSC_LIB) {
            exclude(group: 'net.java.dev.jna')
        }

        perfImplementation(JNA_LIB)
    }

    processIntegrationTestResources {
        duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    }

    integrationTest {
        // do not run tests that require S3 access
        useJUnitPlatform {
            excludeTags('s3Access')
        }
    }

    tasks.register('allIntegrationTests', Test) {
        testClassesDirs = sourceSets.integrationTest.output.classesDirs
        classpath = sourceSets.integrationTest.runtimeClasspath

        shouldRunAfter test
        // s3 tests require a lot of memory because it's trying to read large zarr chunks
        minHeapSize = '1g'
        maxHeapSize = '2g'

        // include all tests
        useJUnitPlatform() {
            if (System.getProperty("includeSlow")) {
                includeTags("slow")
            } else {
                excludeTags("slow")
            }
        }
    }

    tasks.register('createStorageRetrieveBenchmark', CreateStartScripts) {
        dependsOn(perfJar, startScripts)

        mainClass = 'org.janelia.jacsstorage.service.benchmarks.cmd.StorageRetrieveBenchmark'
        classpath = startScripts.classpath + configurations.perfRuntimeClasspath + project.perfJar.outputs.files
        outputDir = startScripts.outputDir
        applicationName = 'storageRetrieveBenchmarks'
    }

    distributions {
        benchmarks {
            contents {
                into("bin") {
                    from(createStorageRetrieveBenchmark)
                }
                into("lib") {
                    from(project.perfJar.outputs.files)
                    from(project.configurations.perfRuntimeClasspath)
                }
            }
        }
    }

    [distTar, distZip, benchmarksDistTar, benchmarksDistZip, installDist, installBenchmarksDist].each {
        it.dependsOn(createStorageRetrieveBenchmark)
    }

}

ext.moduleName = 'org.janelia.jacsstorage.services'
